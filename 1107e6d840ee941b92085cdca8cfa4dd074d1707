{
  "comments": [
    {
      "key": {
        "uuid": "e07ee33c_7171f030",
        "filename": "src/ce/ve.ce.Surface.js",
        "patchSetId": 1
      },
      "lineNbr": 4513,
      "author": {
        "id": 1453
      },
      "writtenOn": "2019-02-28T14:01:53Z",
      "side": 1,
      "message": "I understand this is meant as an integer cast, but I find it surprising and hard to read. Why does the source contain non-integer values in the first place? Wouldn\u0027t it be better to either fix this issue at it\u0027s root, or teach onSynchronizerAuthorUpdate() to do the conversion?",
      "range": {
        "startLine": 4513,
        "startChar": 39,
        "endLine": 4513,
        "endChar": 48
      },
      "revId": "1107e6d840ee941b92085cdca8cfa4dd074d1707",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "49bd64cf_9bfc06f5",
        "filename": "src/ce/ve.ce.Surface.js",
        "patchSetId": 1
      },
      "lineNbr": 4513,
      "author": {
        "id": 658
      },
      "writtenOn": "2019-02-28T14:24:38Z",
      "side": 1,
      "message": "Because authorSelections is an object keyed on authorId and object keys must always be strings. I\u0027d rather on..AuthorUpdate had a clean API (accepting only numbers) and do the fix here.",
      "parentUuid": "e07ee33c_7171f030",
      "range": {
        "startLine": 4513,
        "startChar": 39,
        "endLine": 4513,
        "endChar": 48
      },
      "revId": "1107e6d840ee941b92085cdca8cfa4dd074d1707",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "985c7c27_fb8bd0d5",
        "filename": "src/ce/ve.ce.Surface.js",
        "patchSetId": 1
      },
      "lineNbr": 4513,
      "author": {
        "id": 1453
      },
      "writtenOn": "2019-02-28T15:19:34Z",
      "side": 1,
      "message": "Do you mind replacing the + with, for example, this?\n\n authorId \u003d parseInt( authorId );",
      "parentUuid": "49bd64cf_9bfc06f5",
      "range": {
        "startLine": 4513,
        "startChar": 39,
        "endLine": 4513,
        "endChar": 48
      },
      "revId": "1107e6d840ee941b92085cdca8cfa4dd074d1707",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "739c1d1a_218a0aa8",
        "filename": "src/ce/ve.ce.Surface.js",
        "patchSetId": 1
      },
      "lineNbr": 4513,
      "author": {
        "id": 839
      },
      "writtenOn": "2019-02-28T16:55:05Z",
      "side": 1,
      "message": "Actually I think for a string that is supposed to be an integer, +x might be a better solution than parseInt( x ).\n\n  \u003e [ \u00272.9999999999999999\u0027, \u00272e-2222\u0027, \u00272.2\u0027, \u00272Pac\u0027 ].map( x \u003d\u003e parseInt( x ) )\n  [ 2, 2, 2, 2 ]\n  \u003e [ \u00272.9999999999999999\u0027, \u00272e-2222\u0027, \u00272.2\u0027, \u00272Pac\u0027 ].map( x \u003d\u003e +x )\n  [ 3, 0, 2.2, NaN ]\n\nBecause parseInt works by truncation, unexpected input can silently get converted to plausible-but-wrong integers. This could be hard to debug.",
      "parentUuid": "985c7c27_fb8bd0d5",
      "range": {
        "startLine": 4513,
        "startChar": 39,
        "endLine": 4513,
        "endChar": 48
      },
      "revId": "1107e6d840ee941b92085cdca8cfa4dd074d1707",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}