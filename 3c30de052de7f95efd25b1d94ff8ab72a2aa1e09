{
  "comments": [
    {
      "key": {
        "uuid": "2ef897d1_a5f19adc",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 180,
      "author": {
        "id": 839
      },
      "writtenOn": "2017-02-06T16:22:31Z",
      "side": 1,
      "message": "Ought we to add \u0027node.queuedEventHashes \u003d null\u0027 in ve.dm.Node?",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_236b5db7",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 180,
      "author": {
        "id": 5
      },
      "writtenOn": "2017-02-07T08:28:04Z",
      "side": 1,
      "message": "I guess that would be cleaner, maybe? OTOH I\u0027m not too sure how much I want nodes to know about a random bit of code in TransactionProcessor. If we had ES6 Set then this wouldn\u0027t be necessary. (This code actually dates back to 2012, but it was a hack then and it\u0027s a hack now.)",
      "parentUuid": "2ef897d1_a5f19adc",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_3ed8107f",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 180,
      "author": {
        "id": 5
      },
      "writtenOn": "2017-02-07T11:57:22Z",
      "side": 1,
      "message": "PS4 cleans this up by changing the duplicate filtering code completely.",
      "parentUuid": "2ef897d1_236b5db7",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_8500deb0",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 839
      },
      "writtenOn": "2017-02-06T16:22:31Z",
      "side": 1,
      "message": "I think this cleanup (whether using delete or setting to null) should be in the finally block of .process . Otherwise we might leave queued events lying around if an exception is thrown.",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_036e21c4",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 5
      },
      "writtenOn": "2017-02-07T08:28:04Z",
      "side": 1,
      "message": "Good point, I\u0027ll move it to a separate function.",
      "parentUuid": "2ef897d1_8500deb0",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_1ecf94b6",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 5
      },
      "writtenOn": "2017-02-07T11:57:22Z",
      "side": 1,
      "message": "PS4 makes this moot by changing the duplicate filtering code completely.",
      "parentUuid": "2ef897d1_036e21c4",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_85a45eb0",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 324,
      "author": {
        "id": 839
      },
      "writtenOn": "2017-02-06T16:22:31Z",
      "side": 1,
      "message": "\"Data to insert; for efficiency, objects are inserted without cloning\"",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_bec40095",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 324,
      "author": {
        "id": 5
      },
      "writtenOn": "2017-02-07T16:59:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2ef897d1_85a45eb0",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_a5187a24",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 326,
      "author": {
        "id": 839
      },
      "writtenOn": "2017-02-06T16:22:31Z",
      "side": 1,
      "message": "\u003cp\u003e",
      "range": {
        "startLine": 326,
        "startChar": 104,
        "endLine": 326,
        "endChar": 105
      },
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_9ec3848c",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 326,
      "author": {
        "id": 5
      },
      "writtenOn": "2017-02-07T16:59:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2ef897d1_a5187a24",
      "range": {
        "startLine": 326,
        "startChar": 104,
        "endLine": 326,
        "endChar": 105
      },
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_14cf7db6",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 328,
      "author": {
        "id": 839
      },
      "writtenOn": "2017-02-06T16:22:31Z",
      "side": 1,
      "message": "(relies on the splice operation objects being unchanged)",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_e36545de",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 328,
      "author": {
        "id": 5
      },
      "writtenOn": "2017-02-07T08:28:04Z",
      "side": 1,
      "message": "Whoops, yes. I\u0027ll just add that to the sentence on line 317.",
      "parentUuid": "2ef897d1_14cf7db6",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_85aa1e6c",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 373,
      "author": {
        "id": 839
      },
      "writtenOn": "2017-02-06T16:22:31Z",
      "side": 1,
      "message": "new ve.dm.FlatLinearData(...) ?",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_c36009cf",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 373,
      "author": {
        "id": 5
      },
      "writtenOn": "2017-02-07T08:28:04Z",
      "side": 1,
      "message": "Yeah, might as well",
      "parentUuid": "2ef897d1_85aa1e6c",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_c54496bf",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 408,
      "author": {
        "id": 839
      },
      "writtenOn": "2017-02-06T16:22:31Z",
      "side": 1,
      "message": "This won\u0027t catch cases like \u003cp\u003e[+some text+]\u003cimg/\u003e\u003c/p\u003e , right? Should we just check for adjacent text?",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_43a3f9fd",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 408,
      "author": {
        "id": 5
      },
      "writtenOn": "2017-02-07T08:28:04Z",
      "side": 1,
      "message": "Yes it does:\n\n    \u003e d \u003d new ve.dm.Document([{type: \u0027paragraph\u0027 }, { type: \u0027inlineImage\u0027 }, { type: \u0027/inlineImage\u0027 }, { type: \u0027/paragraph\u0027 }]);\n    \u003e d.selectNodes(new ve.Range(1), \u0027leaves\u0027)[0].indexInNode\n    0\n\nGenerally speaking, if you feed a zero-length range to selectNodes, one of the following will be true:\n\n- node will be a text node; or\n- indexInNode will be set; or\n- node will be empty (not sure why we don\u0027t set indexInNode\u003d0 here)",
      "parentUuid": "2ef897d1_c54496bf",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_c0ada42f",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 480,
      "author": {
        "id": 839
      },
      "writtenOn": "2017-02-06T16:22:31Z",
      "side": 1,
      "message": "It\u0027s very pretty how the offsets work out right :)",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_c3afe9dc",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 480,
      "author": {
        "id": 5
      },
      "writtenOn": "2017-02-07T08:28:04Z",
      "side": 1,
      "message": "Actually, wait, did I screw up offset adjustments here? s.offset does not include lengthDiffs[s.data], so how could code possibly work? Let me see if I can come up with a failing test case.",
      "parentUuid": "2ef897d1_c0ada42f",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_037501c8",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 480,
      "author": {
        "id": 5
      },
      "writtenOn": "2017-02-07T11:31:36Z",
      "side": 1,
      "message": "It turns out that rollbacks were also fundamentally broken: if a modifier function throws an exception halfway through, it can\u0027t also return a function that undoes its modifications. So I removed the return-a-function mechanism and instead added pushUndoFunction(). Because splice does so many things that can go wrong, I had it add an undo function all the way at the start which then undoes whichever splice operations ended up executing.\n\nAfter all this (and discovering that the s variable wasn\u0027t declared in the function but came from the outer scope, oops!) I was finally able to reproduce the unadjusted offset failure and fix it. All this code (and a test case) is in PS3.",
      "parentUuid": "2ef897d1_c3afe9dc",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_b4c2e937",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 781,
      "author": {
        "id": 839
      },
      "writtenOn": "2017-02-06T16:22:31Z",
      "side": 1,
      "message": "On reflection, I think this is necessary but not sufficient. For example, consider the following change:\n[+\u003cdiv\u003e+]\u003cp\u003efoo[+\u003c/p\u003e+][-bar-][+\u003cp\u003e+]baz\u003c/p\u003e[+\u003c/div\u003e+]\n\nthis.replaceInsertLevel will return to zero at the [+\u003c/p\u003e+], but the replacement up to that point is not balanced.",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_add3bcd6",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 781,
      "author": {
        "id": 839
      },
      "writtenOn": "2017-02-07T00:03:08Z",
      "side": 1,
      "message": "Furthermore, I think the following example shows that in some quirkier cases, it won\u0027t suffice to observe replaced tags (without observing retained tags too):\n\n[+\u003cdiv\u003e+]\u003cul\u003e\u003cli\u003e\u003cdiv\u003e\u003cp\u003efoo\u003c/p\u003e[+\u003c/div\u003e+]\u003cp\u003ebar\u003c/p\u003e[+\u003cdiv\u003e+]\u003cp\u003ebaz\u003c/p\u003e\u003c/div\u003e\u003c/li\u003e\u003c/ul\u003e[+\u003c/div\u003e+]",
      "parentUuid": "2ef897d1_b4c2e937",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_23811d50",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 781,
      "author": {
        "id": 5
      },
      "writtenOn": "2017-02-07T08:28:04Z",
      "side": 1,
      "message": "Hmm... So your first example is invalid because it relies on directly adjacent replace operations (which get merged by pushReplace), but your second example is valid. It\u0027s a crazy combination of a wrap containing a split containing an unwrap, but it\u0027s legal. I suppose I\u0027ll have to keep a depth stack of retained data (adding retained depths to both insertDepth and removeDepth).",
      "parentUuid": "2ef897d1_add3bcd6",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ef897d1_19720ee3",
        "filename": "src/dm/ve.dm.TransactionProcessor.js",
        "patchSetId": 2
      },
      "lineNbr": 781,
      "author": {
        "id": 5
      },
      "writtenOn": "2017-02-07T16:59:57Z",
      "side": 1,
      "message": "PS5 addresses this, but it doesn\u0027t address things like \u003cp\u003eFoo[+\u003c/p\u003e\u003ch2\u003e+]Bar[+\u003c/h2\u003e\u003cp\u003e+]Baz\u003c/p\u003e yet.",
      "parentUuid": "2ef897d1_23811d50",
      "revId": "3c30de052de7f95efd25b1d94ff8ab72a2aa1e09",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}